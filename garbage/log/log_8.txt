
Initializing TSN with base model: BNInception.
TSN Configurations:
    input_modality:     RGB
    num_segments:       1
    new_length:         1
    consensus_module:   avg
    dropout_ratio:      0.7
        

Initializing TSN with base model: BNInception.
TSN Configurations:
    input_modality:     Flow
    num_segments:       1
    new_length:         5
    consensus_module:   avg
    dropout_ratio:      0.7
        
Converting the ImageNet model to a flow init model
Done. Flow model ready...
Freezing BatchNorm2D except the first one.
Freezing BatchNorm2D except the first one.
this is the length of list from get_from_queue 1
this is the size of queue before putitng into tmp_list 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
input_queue size before taking any elem out 1
this is the output_queue size 0 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
let's check what we have got here for the length of list_from_queue before inf. 20 this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
successfully extracted optical flow in 1.2160398960113525!
this is the length of optical_flow list from get_from_queue 1 32
this is the size of queue before putitng into tmp_list 32
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 1 RGB
this is the length of list from get_from_queue 1
[array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ..., 
       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8), array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ..., 
       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8), array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ..., 
       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8), array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ..., 
       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8), array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ..., 
       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8), array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ..., 
       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8), array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ..., 
       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8), array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ..., 
       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8), array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ..., 
       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8), array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ..., 
       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ..., 
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)] 0 RGB
THE RESULT OF INFERENCE OF RGB COMING OUT!
this is the net from make_infer DataParallel(
  (module): TSN(
    (base_model): BNInception(
      (conv1_7x7_s2): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (conv1_7x7_s2_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (conv1_relu_7x7): ReLU(inplace)
      (pool1_3x3_s2): MaxPool2d(kernel_size=(3, 3), stride=(2, 2), dilation=(1, 1), ceil_mode=True)
      (conv2_3x3_reduce): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (conv2_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (conv2_relu_3x3_reduce): ReLU(inplace)
      (conv2_3x3): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2_3x3_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (conv2_relu_3x3): ReLU(inplace)
      (pool2_3x3_s2): MaxPool2d(kernel_size=(3, 3), stride=(2, 2), dilation=(1, 1), ceil_mode=True)
      (inception_3a_1x1): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3a_1x1_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_1x1): ReLU(inplace)
      (inception_3a_3x3_reduce): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3a_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_3x3_reduce): ReLU(inplace)
      (inception_3a_3x3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3a_3x3_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_3x3): ReLU(inplace)
      (inception_3a_double_3x3_reduce): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3a_double_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_double_3x3_reduce): ReLU(inplace)
      (inception_3a_double_3x3_1): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3a_double_3x3_1_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_double_3x3_1): ReLU(inplace)
      (inception_3a_double_3x3_2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3a_double_3x3_2_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_double_3x3_2): ReLU(inplace)
      (inception_3a_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_3a_pool_proj): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
      (inception_3a_pool_proj_bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_pool_proj): ReLU(inplace)
      (inception_3b_1x1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3b_1x1_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_1x1): ReLU(inplace)
      (inception_3b_3x3_reduce): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3b_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_3x3_reduce): ReLU(inplace)
      (inception_3b_3x3): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3b_3x3_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_3x3): ReLU(inplace)
      (inception_3b_double_3x3_reduce): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3b_double_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_double_3x3_reduce): ReLU(inplace)
      (inception_3b_double_3x3_1): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3b_double_3x3_1_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_double_3x3_1): ReLU(inplace)
      (inception_3b_double_3x3_2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3b_double_3x3_2_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_double_3x3_2): ReLU(inplace)
      (inception_3b_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_3b_pool_proj): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3b_pool_proj_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_pool_proj): ReLU(inplace)
      (inception_3c_3x3_reduce): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_3c_3x3_reduce_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_3c_relu_3x3_reduce): ReLU(inplace)
      (inception_3c_3x3): Conv2d(128, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (inception_3c_3x3_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_3c_relu_3x3): ReLU(inplace)
      (inception_3c_double_3x3_reduce): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3c_double_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3c_relu_double_3x3_reduce): ReLU(inplace)
      (inception_3c_double_3x3_1): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3c_double_3x3_1_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3c_relu_double_3x3_1): ReLU(inplace)
      (inception_3c_double_3x3_2): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (inception_3c_double_3x3_2_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3c_relu_double_3x3_2): ReLU(inplace)
      (inception_3c_pool): MaxPool2d(kernel_size=(3, 3), stride=(2, 2), dilation=(1, 1), ceil_mode=True)
      (inception_4a_1x1): Conv2d(576, 224, kernel_size=(1, 1), stride=(1, 1))
      (inception_4a_1x1_bn): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_1x1): ReLU(inplace)
      (inception_4a_3x3_reduce): Conv2d(576, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_4a_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_3x3_reduce): ReLU(inplace)
      (inception_4a_3x3): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4a_3x3_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_3x3): ReLU(inplace)
      (inception_4a_double_3x3_reduce): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
      (inception_4a_double_3x3_reduce_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_double_3x3_reduce): ReLU(inplace)
      (inception_4a_double_3x3_1): Conv2d(96, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4a_double_3x3_1_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_double_3x3_1): ReLU(inplace)
      (inception_4a_double_3x3_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4a_double_3x3_2_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_double_3x3_2): ReLU(inplace)
      (inception_4a_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_4a_pool_proj): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4a_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_pool_proj): ReLU(inplace)
      (inception_4b_1x1): Conv2d(576, 192, kernel_size=(1, 1), stride=(1, 1))
      (inception_4b_1x1_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_1x1): ReLU(inplace)
      (inception_4b_3x3_reduce): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
      (inception_4b_3x3_reduce_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_3x3_reduce): ReLU(inplace)
      (inception_4b_3x3): Conv2d(96, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4b_3x3_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_3x3): ReLU(inplace)
      (inception_4b_double_3x3_reduce): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
      (inception_4b_double_3x3_reduce_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_double_3x3_reduce): ReLU(inplace)
      (inception_4b_double_3x3_1): Conv2d(96, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4b_double_3x3_1_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_double_3x3_1): ReLU(inplace)
      (inception_4b_double_3x3_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4b_double_3x3_2_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_double_3x3_2): ReLU(inplace)
      (inception_4b_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_4b_pool_proj): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4b_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_pool_proj): ReLU(inplace)
      (inception_4c_1x1): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1))
      (inception_4c_1x1_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_1x1): ReLU(inplace)
      (inception_4c_3x3_reduce): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4c_3x3_reduce_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_3x3_reduce): ReLU(inplace)
      (inception_4c_3x3): Conv2d(128, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4c_3x3_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_3x3): ReLU(inplace)
      (inception_4c_double_3x3_reduce): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4c_double_3x3_reduce_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_double_3x3_reduce): ReLU(inplace)
      (inception_4c_double_3x3_1): Conv2d(128, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4c_double_3x3_1_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_double_3x3_1): ReLU(inplace)
      (inception_4c_double_3x3_2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4c_double_3x3_2_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_double_3x3_2): ReLU(inplace)
      (inception_4c_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_4c_pool_proj): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4c_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_pool_proj): ReLU(inplace)
      (inception_4d_1x1): Conv2d(608, 96, kernel_size=(1, 1), stride=(1, 1))
      (inception_4d_1x1_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_1x1): ReLU(inplace)
      (inception_4d_3x3_reduce): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4d_3x3_reduce_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_3x3_reduce): ReLU(inplace)
      (inception_4d_3x3): Conv2d(128, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4d_3x3_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_3x3): ReLU(inplace)
      (inception_4d_double_3x3_reduce): Conv2d(608, 160, kernel_size=(1, 1), stride=(1, 1))
      (inception_4d_double_3x3_reduce_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_double_3x3_reduce): ReLU(inplace)
      (inception_4d_double_3x3_1): Conv2d(160, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4d_double_3x3_1_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_double_3x3_1): ReLU(inplace)
      (inception_4d_double_3x3_2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4d_double_3x3_2_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_double_3x3_2): ReLU(inplace)
      (inception_4d_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_4d_pool_proj): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4d_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_pool_proj): ReLU(inplace)
      (inception_4e_3x3_reduce): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4e_3x3_reduce_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4e_relu_3x3_reduce): ReLU(inplace)
      (inception_4e_3x3): Conv2d(128, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (inception_4e_3x3_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4e_relu_3x3): ReLU(inplace)
      (inception_4e_double_3x3_reduce): Conv2d(608, 192, kernel_size=(1, 1), stride=(1, 1))
      (inception_4e_double_3x3_reduce_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4e_relu_double_3x3_reduce): ReLU(inplace)
      (inception_4e_double_3x3_1): Conv2d(192, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4e_double_3x3_1_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (inception_4e_relu_double_3x3_1): ReLU(inplace)
      (inception_4e_double_3x3_2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (inception_4e_double_3x3_2_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (inception_4e_relu_double_3x3_2): ReLU(inplace)
      (inception_4e_pool): MaxPool2d(kernel_size=(3, 3), stride=(2, 2), dilation=(1, 1), ceil_mode=True)
      (inception_5a_1x1): Conv2d(1056, 352, kernel_size=(1, 1), stride=(1, 1))
      (inception_5a_1x1_bn): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_1x1): ReLU(inplace)
      (inception_5a_3x3_reduce): Conv2d(1056, 192, kernel_size=(1, 1), stride=(1, 1))
      (inception_5a_3x3_reduce_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_3x3_reduce): ReLU(inplace)
      (inception_5a_3x3): Conv2d(192, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5a_3x3_bn): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_3x3): ReLU(inplace)
      (inception_5a_double_3x3_reduce): Conv2d(1056, 160, kernel_size=(1, 1), stride=(1, 1))
      (inception_5a_double_3x3_reduce_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_double_3x3_reduce): ReLU(inplace)
      (inception_5a_double_3x3_1): Conv2d(160, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5a_double_3x3_1_bn): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_double_3x3_1): ReLU(inplace)
      (inception_5a_double_3x3_2): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5a_double_3x3_2_bn): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_double_3x3_2): ReLU(inplace)
      (inception_5a_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_5a_pool_proj): Conv2d(1056, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_5a_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_pool_proj): ReLU(inplace)
      (inception_5b_1x1): Conv2d(1024, 352, kernel_size=(1, 1), stride=(1, 1))
      (inception_5b_1x1_bn): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_1x1): ReLU(inplace)
      (inception_5b_3x3_reduce): Conv2d(1024, 192, kernel_size=(1, 1), stride=(1, 1))
      (inception_5b_3x3_reduce_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_3x3_reduce): ReLU(inplace)
      (inception_5b_3x3): Conv2d(192, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5b_3x3_bn): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_3x3): ReLU(inplace)
      (inception_5b_double_3x3_reduce): Conv2d(1024, 192, kernel_size=(1, 1), stride=(1, 1))
      (inception_5b_double_3x3_reduce_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_double_3x3_reduce): ReLU(inplace)
      (inception_5b_double_3x3_1): Conv2d(192, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5b_double_3x3_1_bn): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_double_3x3_1): ReLU(inplace)
      (inception_5b_double_3x3_2): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5b_double_3x3_2_bn): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_double_3x3_2): ReLU(inplace)
      (inception_5b_pool): MaxPool2d(kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), ceil_mode=True)
      (inception_5b_pool_proj): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_5b_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_pool_proj): ReLU(inplace)
      (global_pool): AvgPool2d(kernel_size=7, stride=1, padding=0, ceil_mode=True, count_include_pad=True)
      (fc): Dropout(p=0.7)
    )
    (new_fc): Linear(in_features=1024, out_features=51, bias=True)
    (consensus): ConsensusModule(
    )
  )
)  and this is the length of fifty data list (supposed to be fifty? 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
successfully extracted optical flow in 0.6792440414428711!
this is the length of optical_flow list from get_from_queue 2 50
this is the size of queue before putitng into tmp_list 50
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 2 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 3 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 4 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
successfully extracted optical flow in 1.567894697189331!
this is the length of optical_flow list from get_from_queue 3 100
this is the size of queue before putitng into tmp_list 100
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 5 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 6 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
successfully extracted optical flow in 1.2088840007781982!
this is the length of optical_flow list from get_from_queue 4 142
this is the size of queue before putitng into tmp_list 142
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 7 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 8 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
successfully extracted optical flow in 0.9846601486206055!
this is the length of optical_flow list from get_from_queue 5 181
this is the size of queue before putitng into tmp_list 181
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 9 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
successfully extracted optical flow in 0.4917786121368408!
this is the length of optical_flow list from get_from_queue 6 202
this is the size of queue before putitng into tmp_list 202
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 10 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 11 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 12 RGB
this is the length of list from get_from_queue 1
successfully extracted optical flow in 1.0988526344299316!
this is the length of optical_flow list from get_from_queue 7 248
this is the size of queue before putitng into tmp_list 248
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 13 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 14 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
successfully extracted optical flow in 1.3772366046905518!
this is the length of optical_flow list from get_from_queue 8 303
this is the size of queue before putitng into tmp_list 303
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 15 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 16 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 17 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
successfully extracted optical flow in 1.3252167701721191!
this is the length of optical_flow list from get_from_queue 9 353
this is the size of queue before putitng into tmp_list 353
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 18 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 19 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
successfully extracted optical flow in 1.0895557403564453!
this is the length of optical_flow list from get_from_queue 10 398
this is the size of queue before putitng into tmp_list 398
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 20 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 21 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
successfully extracted optical flow in 0.8173062801361084!
this is the length of optical_flow list from get_from_queue 11 429
this is the size of queue before putitng into tmp_list 429
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 22 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
successfully extracted optical flow in 0.541754961013794!
this is the length of optical_flow list from get_from_queue 12 448
this is the size of queue before putitng into tmp_list 448
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 23 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 24 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
successfully extracted optical flow in 1.091853141784668!
this is the length of optical_flow list from get_from_queue 13 486
this is the size of queue before putitng into tmp_list 486
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 25 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 26 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 27 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
successfully extracted optical flow in 1.4402544498443604!
this is the length of optical_flow list from get_from_queue 14 539
this is the size of queue before putitng into tmp_list 539
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 28 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
successfully extracted optical flow in 0.5960235595703125!
this is the length of optical_flow list from get_from_queue 15 560
this is the size of queue before putitng into tmp_list 560
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 29 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 30 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
successfully extracted optical flow in 1.0723421573638916!
this is the length of optical_flow list from get_from_queue 16 597
this is the size of queue before putitng into tmp_list 597
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 31 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 32 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
successfully extracted optical flow in 1.3727807998657227!
this is the length of optical_flow list from get_from_queue 17 643
this is the size of queue before putitng into tmp_list 643
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 33 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 34 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
successfully extracted optical flow in 1.2950897216796875!
this is the length of optical_flow list from get_from_queue 18 681
this is the size of queue before putitng into tmp_list 681
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 35 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 36 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
successfully extracted optical flow in 1.123119592666626!
this is the length of optical_flow list from get_from_queue 19 720
this is the size of queue before putitng into tmp_list 720
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 37 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 38 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
successfully extracted optical flow in 0.7892601490020752!
this is the length of optical_flow list from get_from_queue 20 746
input_queue size before taking any elem out 1
let's check what we have got here for the length of list_from_queue before inf. 20 this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 39 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 40 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
[[array([[ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       ..., 
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5]], dtype=float32), array([[ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       ..., 
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5]], dtype=float32)], [array([[ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       ..., 
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5]], dtype=float32), array([[ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       ..., 
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5]], dtype=float32)], [array([[ 127.56243896,  127.56181335,  127.56082916, ...,  127.51719666,
         127.51648712,  127.51583099],
       [ 127.56203461,  127.56156921,  127.56069183, ...,  127.51689911,
         127.51676178,  127.51617432],
       [ 127.56164551,  127.56130981,  127.56053162, ...,  127.51753235,
         127.5174408 ,  127.51670074],
       ..., 
       [ 127.5741272 ,  127.57291412,  127.57211304, ...,  127.58886719,
         127.58934021,  127.58974457],
       [ 127.57380676,  127.57241058,  127.57180786, ...,  127.5891037 ,
         127.58989716,  127.59012604],
       [ 127.57326508,  127.57247925,  127.57176208, ...,  127.58918762,
         127.58996582,  127.59017944]], dtype=float32), array([[ 127.1062851 ,  127.11826324,  127.13374329, ...,  127.34535217,
         127.34039307,  127.33296967],
       [ 127.10862732,  127.11911774,  127.13341522, ...,  127.34888458,
         127.33869171,  127.33580017],
       [ 127.11188507,  127.12071991,  127.13433838, ...,  127.34833527,
         127.33924866,  127.33963776],
       ..., 
       [ 127.22284698,  127.22125244,  127.21947479, ...,  127.49713135,
         127.4970932 ,  127.49842834],
       [ 127.22013855,  127.21910095,  127.21643066, ...,  127.4960022 ,
         127.49700928,  127.49728394],
       [ 127.2184906 ,  127.21634674,  127.21612549, ...,  127.49562073,
         127.49654388,  127.4970932 ]], dtype=float32)], [array([[ 127.45316315,  127.45317078,  127.45291138, ...,  127.55902863,
         127.5655365 ,  127.56900787],
       [ 127.45327759,  127.45318604,  127.45288849, ...,  127.55903625,
         127.5655365 ,  127.5690155 ],
       [ 127.45334625,  127.45323181,  127.45297241, ...,  127.5589447 ,
         127.56533813,  127.56885529],
       ..., 
       [ 127.42222595,  127.42234039,  127.42325592, ...,  127.52593994,
         127.52503204,  127.52480316],
       [ 127.42220306,  127.42264557,  127.42275238, ...,  127.52579498,
         127.5249176 ,  127.52461243],
       [ 127.42235565,  127.42234039,  127.42285156, ...,  127.52562714,
         127.5247345 ,  127.52463531]], dtype=float32), array([[ 127.55696106,  127.55734253,  127.55860901, ...,  126.70256042,
         126.70198059,  126.70362091],
       [ 127.55690765,  127.55725098,  127.55844116, ...,  126.70230103,
         126.70220947,  126.70348358],
       [ 127.55683136,  127.55696869,  127.55804443, ...,  126.70214081,
         126.70265198,  126.70170593],
       ..., 
       [ 127.55738831,  127.55690765,  127.55489349, ...,  127.56980133,
         127.56793213,  127.56733704],
       [ 127.55781555,  127.5572052 ,  127.55522156, ...,  127.57012939,
         127.56839752,  127.5680542 ],
       [ 127.55819702,  127.55721283,  127.55574799, ...,  127.57053375,
         127.5688858 ,  127.568367  ]], dtype=float32)], [array([[ 127.50927734,  127.50933838,  127.50943756, ...,  127.48519897,
         127.48501587,  127.48477173],
       [ 127.50927734,  127.50933838,  127.50945282, ...,  127.48529053,
         127.48499298,  127.48480988],
       [ 127.50928497,  127.50934601,  127.50945282, ...,  127.48538971,
         127.48505402,  127.48486328],
       ..., 
       [ 127.5093689 ,  127.50948334,  127.50968933, ...,  127.50535583,
         127.50583649,  127.50622559],
       [ 127.50923157,  127.50938416,  127.50959015, ...,  127.50533295,
         127.5058136 ,  127.50619507],
       [ 127.50917816,  127.50937653,  127.50949097, ...,  127.50532532,
         127.50582123,  127.50617981]], dtype=float32), array([[ 127.47831726,  127.47824097,  127.47822571, ...,  127.61872101,
         127.61566925,  127.6138916 ],
       [ 127.47834778,  127.47818756,  127.47823334, ...,  127.6187439 ,
         127.61587524,  127.61391449],
       [ 127.47829437,  127.47829437,  127.47834778, ...,  127.61904907,
         127.61607361,  127.61380005],
       ..., 
       [ 127.49925232,  127.49897766,  127.49899292, ...,  127.5071106 ,
         127.50661469,  127.50634766],
       [ 127.49971008,  127.49919128,  127.49917603, ...,  127.50713348,
         127.50662994,  127.50635529],
       [ 127.49995422,  127.49978638,  127.49913025, ...,  127.50714111,
         127.50663757,  127.50637054]], dtype=float32)], [array([[ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       ..., 
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5]], dtype=float32), array([[ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       ..., 
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5]], dtype=float32)], [array([[ 127.44309235,  127.44272614,  127.44335175, ...,  127.51181793,
         127.51246643,  127.51278687],
       [ 127.44288635,  127.44277954,  127.44363403, ...,  127.51167297,
         127.51248932,  127.51272583],
       [ 127.44265747,  127.44277954,  127.44406891, ...,  127.51145935,
         127.51236725,  127.51249695],
       ..., 
       [ 127.42792511,  127.4285202 ,  127.42935181, ...,  127.51365662,
         127.51314545,  127.51308441],
       [ 127.42784882,  127.42845154,  127.42931366, ...,  127.51361847,
         127.5131073 ,  127.51292419],
       [ 127.4278717 ,  127.42845917,  127.42932129, ...,  127.5135498 ,
         127.51300049,  127.5128479 ]], dtype=float32), array([[ 127.2421875 ,  127.24355316,  127.24814606, ...,  127.3343277 ,
         127.33256531,  127.3314209 ],
       [ 127.24210358,  127.24330902,  127.24846649, ...,  127.3345871 ,
         127.33274078,  127.33150482],
       [ 127.24252319,  127.24381256,  127.24937439, ...,  127.33446503,
         127.33269501,  127.33151245],
       ..., 
       [ 127.49581146,  127.49636078,  127.49634552, ...,  127.46615601,
         127.46644592,  127.46659088],
       [ 127.49570465,  127.49510956,  127.49636078, ...,  127.46624756,
         127.46643066,  127.46649933],
       [ 127.49510193,  127.49563599,  127.49608612, ...,  127.46625519,
         127.46639252,  127.46644592]], dtype=float32)], [array([[ 127.48765564,  127.48815155,  127.48792267, ...,  127.56885529,
         127.57408142,  127.57980347],
       [ 127.48809814,  127.4878006 ,  127.48726654, ...,  127.56858063,
         127.57392883,  127.57978821],
       [ 127.48764038,  127.48706055,  127.48677826, ...,  127.56813812,
         127.57337189,  127.5785141 ],
       ..., 
       [ 127.42434692,  127.42324066,  127.42230225, ...,  127.38859558,
         127.38774109,  127.38652802],
       [ 127.424263  ,  127.42362976,  127.42258453, ...,  127.38851929,
         127.38736725,  127.38668823],
       [ 127.42443848,  127.42352295,  127.4225769 , ...,  127.3886261 ,
         127.38664246,  127.3866272 ]], dtype=float32), array([[ 127.52298737,  127.52910614,  127.53903198, ...,  127.11256409,
         127.11531067,  127.11598206],
       [ 127.52265167,  127.52936554,  127.53833008, ...,  127.1124649 ,
         127.1151886 ,  127.11717224],
       [ 127.52381134,  127.52906799,  127.53734589, ...,  127.11436462,
         127.11540985,  127.11811066],
       ..., 
       [ 127.33190918,  127.33227539,  127.33195496, ...,  127.6087265 ,
         127.60765839,  127.605896  ],
       [ 127.33023834,  127.33088684,  127.33110046, ...,  127.60906982,
         127.60624695,  127.60601044],
       [ 127.32917023,  127.32984924,  127.33021545, ...,  127.60906219,
         127.60660553,  127.60601044]], dtype=float32)], [array([[ 127.40572357,  127.40666962,  127.40849304, ...,  127.43286133,
         127.43333435,  127.43315887],
       [ 127.40583038,  127.40683746,  127.40865326, ...,  127.43278503,
         127.4332428 ,  127.43240356],
       [ 127.40610504,  127.40707397,  127.40900421, ...,  127.43247986,
         127.43405914,  127.4322052 ],
       ..., 
       [ 127.44077301,  127.44033813,  127.4408493 , ...,  127.47940826,
         127.47975159,  127.48007202],
       [ 127.44142914,  127.44047546,  127.44169617, ...,  127.47975159,
         127.48003387,  127.48046112],
       [ 127.44151306,  127.44070435,  127.44160461, ...,  127.47993469,
         127.48038483,  127.48049927]], dtype=float32), array([[ 127.60920715,  127.60681152,  127.60113525, ...,  128.13000488,
         128.14233398,  128.1476593 ],
       [ 127.60899353,  127.60636139,  127.60108185, ...,  128.12973022,
         128.14305115,  128.14306641],
       [ 127.60890961,  127.60584259,  127.60053253, ...,  128.1282196 ,
         128.1395874 ,  128.13980103],
       ..., 
       [ 127.8102951 ,  127.80700684,  127.79927063, ...,  127.48247528,
         127.48318481,  127.48274231],
       [ 127.81178284,  127.80754089,  127.79933929, ...,  127.48213196,
         127.4830246 ,  127.48339081],
       [ 127.81299591,  127.80784607,  127.79991913, ...,  127.48210907,
         127.48258209,  127.4836731 ]], dtype=float32)], [array([[ 127.43349457,  127.43309021,  127.43431091, ...,  127.52173615,
         127.5217514 ,  127.52190399],
       [ 127.43325806,  127.43327332,  127.43413544, ...,  127.52174377,
         127.52171326,  127.5218277 ],
       [ 127.43281555,  127.43267822,  127.43373108, ...,  127.52178192,
         127.52167511,  127.52173615],
       ..., 
       [ 127.48878479,  127.48829651,  127.487854  , ...,  127.4985199 ,
         127.49829865,  127.49822235],
       [ 127.4888916 ,  127.48838043,  127.48788452, ...,  127.49841309,
         127.49813843,  127.4980011 ],
       [ 127.48889923,  127.48844147,  127.48804474, ...,  127.4983902 ,
         127.49804688,  127.49787903]], dtype=float32), array([[ 127.37352753,  127.37556458,  127.37784576, ...,  127.10389709,
         127.10444641,  127.10739136],
       [ 127.37403107,  127.37567139,  127.37866211, ...,  127.10446167,
         127.10475922,  127.10747528],
       [ 127.37501526,  127.3762207 ,  127.37947083, ...,  127.10440063,
         127.10515594,  127.10627747],
       ..., 
       [ 127.41893005,  127.41868591,  127.42077637, ...,  127.4826355 ,
         127.48274994,  127.48279572],
       [ 127.41831207,  127.41986084,  127.41975403, ...,  127.4828186 ,
         127.48288727,  127.48288727],
       [ 127.41795349,  127.4190979 ,  127.42008972, ...,  127.48283386,
         127.4828949 ,  127.48292542]], dtype=float32)], [array([[ 127.49998474,  127.49997711,  127.49996185, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.49998474,  127.49997711,  127.49996185, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.49998474,  127.49997711,  127.49996185, ...,  127.5       ,
         127.5       ,  127.5       ],
       ..., 
       [ 127.50002289,  127.50003052,  127.50004578, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.50002289,  127.50003052,  127.50004578, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.50002289,  127.50003052,  127.50004578, ...,  127.5       ,
         127.5       ,  127.5       ]], dtype=float32), array([[ 127.49994659,  127.49991608,  127.49986267, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.49994659,  127.49991608,  127.49986267, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.49994659,  127.49991608,  127.49986267, ...,  127.5       ,
         127.5       ,  127.5       ],
       ..., 
       [ 127.49997711,  127.49996948,  127.49994659, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.49997711,  127.49996948,  127.49994659, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.49997711,  127.49996948,  127.49994659, ...,  127.5       ,
         127.5       ,  127.5       ]], dtype=float32)], [array([[ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       ..., 
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5]], dtype=float32), array([[ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       ..., 
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5]], dtype=float32)], [array([[ 127.44019318,  127.44042206,  127.44120789, ...,  127.50938416,
         127.51016235,  127.5099411 ],
       [ 127.44029236,  127.4405365 ,  127.44126129, ...,  127.50927734,
         127.50972748,  127.50987244],
       [ 127.44045258,  127.44073486,  127.4413681 , ...,  127.5094223 ,
         127.50967407,  127.50994873],
       ..., 
       [ 127.4443512 ,  127.44445801,  127.44517517, ...,  127.51111603,
         127.5112381 ,  127.51126862],
       [ 127.44450378,  127.44485474,  127.44494629, ...,  127.51121521,
         127.51131439,  127.51138306],
       [ 127.44470215,  127.44467163,  127.44515991, ...,  127.5112381 ,
         127.51138306,  127.51140594]], dtype=float32), array([[ 127.49568939,  127.49588013,  127.49469757, ...,  127.44371033,
         127.44475555,  127.44570923],
       [ 127.49572754,  127.49600983,  127.49479675, ...,  127.44374847,
         127.44471741,  127.4458847 ],
       [ 127.49583435,  127.4959259 ,  127.49477386, ...,  127.44405365,
         127.44476318,  127.44607544],
       ..., 
       [ 127.62667084,  127.62815094,  127.62942505, ...,  127.49308014,
         127.49334717,  127.49347687],
       [ 127.62789154,  127.62908173,  127.63031006, ...,  127.49329376,
         127.49378967,  127.49394226],
       [ 127.62884521,  127.6295166 ,  127.63018036, ...,  127.49349213,
         127.493927  ,  127.49420929]], dtype=float32)], [array([[ 127.45257568,  127.45468903,  127.45658112, ...,  127.48241425,
         127.48556519,  127.48718262],
       [ 127.45259094,  127.4543457 ,  127.45638275, ...,  127.48236084,
         127.48509979,  127.48750305],
       [ 127.45209503,  127.45452881,  127.45594788, ...,  127.48245239,
         127.48503113,  127.48791504],
       ..., 
       [ 127.55715179,  127.55669403,  127.55664062, ...,  127.52573395,
         127.52615356,  127.52610016],
       [ 127.55683899,  127.55648804,  127.55647278, ...,  127.52579498,
         127.52632904,  127.52613831],
       [ 127.5567627 ,  127.55628967,  127.5563736 , ...,  127.52571106,
         127.52633667,  127.52627563]], dtype=float32), array([[ 127.51859283,  127.51682281,  127.5161972 , ...,  127.2640686 ,
         127.2569809 ,  127.25177765],
       [ 127.51792145,  127.51694489,  127.51582336, ...,  127.26446533,
         127.25708008,  127.2519989 ],
       [ 127.51752472,  127.5163269 ,  127.51522827, ...,  127.26513672,
         127.25741577,  127.25325012],
       ..., 
       [ 127.29603577,  127.29675293,  127.30345917, ...,  127.66796112,
         127.67443848,  127.67840576],
       [ 127.2958374 ,  127.29797363,  127.30029297, ...,  127.66764832,
         127.67425537,  127.67832947],
       [ 127.29456329,  127.29815674,  127.30121613, ...,  127.66777802,
         127.67384338,  127.6782608 ]], dtype=float32)], [array([[ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       ..., 
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5]], dtype=float32), array([[ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       ..., 
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5],
       [ 127.5,  127.5,  127.5, ...,  127.5,  127.5,  127.5]], dtype=float32)], [array([[ 127.49160767,  127.49170685,  127.49242401, ...,  127.52266693,
         127.52240753,  127.52233124],
       [ 127.4916153 ,  127.49201202,  127.49243164, ...,  127.52262115,
         127.52250671,  127.52239227],
       [ 127.49188232,  127.49192047,  127.49234772, ...,  127.52268219,
         127.52256775,  127.52256775],
       ..., 
       [ 127.48262787,  127.48259735,  127.48256683, ...,  127.48642731,
         127.48641968,  127.48645782],
       [ 127.48232269,  127.4822464 ,  127.48249817, ...,  127.48646545,
         127.48646545,  127.48649597],
       [ 127.48197937,  127.48214722,  127.48225403, ...,  127.48647308,
         127.48653412,  127.48654175]], dtype=float32), array([[ 127.24806976,  127.24617767,  127.24414825, ...,  126.99822998,
         126.990242  ,  126.98752594],
       [ 127.24794006,  127.24632263,  127.24436951, ...,  126.99842072,
         126.99072266,  126.98742676],
       [ 127.24740601,  127.24608612,  127.24401855, ...,  126.99913025,
         126.99182129,  126.98773956],
       ..., 
       [ 127.82289124,  127.82102966,  127.81793976, ...,  127.51399231,
         127.51412201,  127.51383972],
       [ 127.82275391,  127.82038879,  127.81755829, ...,  127.51412201,
         127.51392365,  127.5140152 ],
       [ 127.82235718,  127.82012177,  127.81720734, ...,  127.51393127,
         127.51404572,  127.51394653]], dtype=float32)], [array([[ 127.55695343,  127.55621338,  127.55796051, ...,  127.5080719 ,
         127.50789642,  127.50789642],
       [ 127.55721283,  127.556427  ,  127.55775452, ...,  127.50821686,
         127.508255  ,  127.50787354],
       [ 127.55680084,  127.55651855,  127.55770874, ...,  127.50893402,
         127.50843811,  127.50832367],
       ..., 
       [ 127.59056854,  127.59028625,  127.58892822, ...,  127.46353912,
         127.46716309,  127.46923065],
       [ 127.59076691,  127.59041595,  127.58905029, ...,  127.46424103,
         127.4679718 ,  127.46923828],
       [ 127.59086609,  127.59033203,  127.58908844, ...,  127.46471405,
         127.46793365,  127.46937561]], dtype=float32), array([[ 127.19712067,  127.19334412,  127.18515015, ...,  127.47002411,
         127.46872711,  127.46874237],
       [ 127.19746399,  127.1938858 ,  127.18445587, ...,  127.47052002,
         127.46902466,  127.46844482],
       [ 127.1966629 ,  127.19369507,  127.18378448, ...,  127.47052765,
         127.46942139,  127.4686203 ],
       ..., 
       [ 127.74863434,  127.75500488,  127.76444244, ...,  127.68895721,
         127.68810272,  127.68547821],
       [ 127.74864197,  127.75454712,  127.76379395, ...,  127.68881989,
         127.68817139,  127.68596649],
       [ 127.7491684 ,  127.75484467,  127.76373291, ...,  127.68878174,
         127.68816376,  127.686409  ]], dtype=float32)], [array([[ 127.53582764,  127.53570557,  127.53507233, ...,  127.42943573,
         127.42627716,  127.42453766],
       [ 127.53585052,  127.5357132 ,  127.5349884 , ...,  127.42988586,
         127.42609406,  127.42469788],
       [ 127.53587341,  127.53570557,  127.5349884 , ...,  127.4307785 ,
         127.42745972,  127.42442322],
       ..., 
       [ 127.63330078,  127.63098145,  127.62745667, ...,  127.4746933 ,
         127.47550201,  127.47557831],
       [ 127.63306427,  127.63088989,  127.62761688, ...,  127.47520447,
         127.47551727,  127.47608185],
       [ 127.63302612,  127.63095093,  127.62772369, ...,  127.4751358 ,
         127.47586823,  127.4761734 ]], dtype=float32), array([[ 127.74318695,  127.74128723,  127.73709869, ...,  127.83647156,
         127.84234619,  127.84138489],
       [ 127.74281311,  127.74086761,  127.73661041, ...,  127.83657837,
         127.84179688,  127.84037018],
       [ 127.74214172,  127.74000549,  127.73567963, ...,  127.83591461,
         127.83965302,  127.83835602],
       ..., 
       [ 127.31354523,  127.32170868,  127.33035278, ...,  127.52425385,
         127.52407837,  127.52352905],
       [ 127.31282043,  127.32217407,  127.33049011, ...,  127.52494812,
         127.52349854,  127.52326965],
       [ 127.31284332,  127.32169342,  127.33023834, ...,  127.52464294,
         127.52358246,  127.5230484 ]], dtype=float32)], [array([[ 127.50593567,  127.50646973,  127.50732422, ...,  127.50530243,
         127.50544739,  127.50498199],
       [ 127.50585938,  127.50649261,  127.50721741, ...,  127.50530243,
         127.50540161,  127.50497437],
       [ 127.50608826,  127.50674438,  127.50743103, ...,  127.50533295,
         127.50545502,  127.50509644],
       ..., 
       [ 127.47491455,  127.47483063,  127.4751358 , ...,  127.50017548,
         127.50016022,  127.50015259],
       [ 127.47488403,  127.4752121 ,  127.47546387, ...,  127.50016785,
         127.50015259,  127.50015259],
       [ 127.47505951,  127.47540283,  127.4756012 , ...,  127.50016785,
         127.50015259,  127.50014496]], dtype=float32), array([[ 127.5528717 ,  127.55295563,  127.55389404, ...,  127.332901  ,
         127.33743286,  127.34021759],
       [ 127.55297089,  127.55321503,  127.55367279, ...,  127.33329773,
         127.33682251,  127.34024048],
       [ 127.55264282,  127.55294037,  127.55349731, ...,  127.33369446,
         127.33654785,  127.33821106],
       ..., 
       [ 127.51258087,  127.51273346,  127.51303101, ...,  127.49795532,
         127.49814606,  127.49820709],
       [ 127.51272583,  127.51287842,  127.51304626, ...,  127.49797821,
         127.49814606,  127.49826813],
       [ 127.51282501,  127.51292419,  127.51307678, ...,  127.4980011 ,
         127.49815369,  127.49829102]], dtype=float32)], [array([[ 127.50085449,  127.50093079,  127.50109863, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.50085449,  127.50093079,  127.501091  , ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.50083923,  127.50092316,  127.50108337, ...,  127.5       ,
         127.5       ,  127.5       ],
       ..., 
       [ 127.49996185,  127.49995422,  127.49992371, ...,  127.50001526,
         127.50002289,  127.50002289],
       [ 127.49996948,  127.49995422,  127.49992371, ...,  127.50001526,
         127.50002289,  127.50002289],
       [ 127.49996948,  127.49995422,  127.49992371, ...,  127.50001526,
         127.50002289,  127.50002289]], dtype=float32), array([[ 127.5016098 ,  127.50197601,  127.50276947, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.50160217,  127.50196838,  127.50275421, ...,  127.5       ,
         127.5       ,  127.5       ],
       [ 127.50159454,  127.50195312,  127.50273132, ...,  127.5       ,
         127.5       ,  127.5       ],
       ..., 
       [ 127.49983978,  127.49977875,  127.49966431, ...,  127.50026703,
         127.50016022,  127.50012207],
       [ 127.49983978,  127.49978638,  127.49967957, ...,  127.50026703,
         127.50016785,  127.50012207],
       [ 127.49984741,  127.49979401,  127.49967957, ...,  127.50026703,
         127.50016785,  127.50012207]], dtype=float32)]] 0 Flow
THE RESULT OF INFERENCE OF Flow COMING OUT!
this is the net from make_infer DataParallel(
  (module): TSN(
    (base_model): BNInception(
      (conv1_7x7_s2): Conv2d(10, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (conv1_7x7_s2_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (conv1_relu_7x7): ReLU(inplace)
      (pool1_3x3_s2): MaxPool2d(kernel_size=(3, 3), stride=(2, 2), dilation=(1, 1), ceil_mode=True)
      (conv2_3x3_reduce): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (conv2_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (conv2_relu_3x3_reduce): ReLU(inplace)
      (conv2_3x3): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2_3x3_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (conv2_relu_3x3): ReLU(inplace)
      (pool2_3x3_s2): MaxPool2d(kernel_size=(3, 3), stride=(2, 2), dilation=(1, 1), ceil_mode=True)
      (inception_3a_1x1): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3a_1x1_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_1x1): ReLU(inplace)
      (inception_3a_3x3_reduce): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3a_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_3x3_reduce): ReLU(inplace)
      (inception_3a_3x3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3a_3x3_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_3x3): ReLU(inplace)
      (inception_3a_double_3x3_reduce): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3a_double_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_double_3x3_reduce): ReLU(inplace)
      (inception_3a_double_3x3_1): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3a_double_3x3_1_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_double_3x3_1): ReLU(inplace)
      (inception_3a_double_3x3_2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3a_double_3x3_2_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_double_3x3_2): ReLU(inplace)
      (inception_3a_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_3a_pool_proj): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
      (inception_3a_pool_proj_bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (inception_3a_relu_pool_proj): ReLU(inplace)
      (inception_3b_1x1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3b_1x1_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_1x1): ReLU(inplace)
      (inception_3b_3x3_reduce): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3b_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_3x3_reduce): ReLU(inplace)
      (inception_3b_3x3): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3b_3x3_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_3x3): ReLU(inplace)
      (inception_3b_double_3x3_reduce): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3b_double_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_double_3x3_reduce): ReLU(inplace)
      (inception_3b_double_3x3_1): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3b_double_3x3_1_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_double_3x3_1): ReLU(inplace)
      (inception_3b_double_3x3_2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3b_double_3x3_2_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_double_3x3_2): ReLU(inplace)
      (inception_3b_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_3b_pool_proj): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3b_pool_proj_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3b_relu_pool_proj): ReLU(inplace)
      (inception_3c_3x3_reduce): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_3c_3x3_reduce_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_3c_relu_3x3_reduce): ReLU(inplace)
      (inception_3c_3x3): Conv2d(128, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (inception_3c_3x3_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_3c_relu_3x3): ReLU(inplace)
      (inception_3c_double_3x3_reduce): Conv2d(320, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_3c_double_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_3c_relu_double_3x3_reduce): ReLU(inplace)
      (inception_3c_double_3x3_1): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_3c_double_3x3_1_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3c_relu_double_3x3_1): ReLU(inplace)
      (inception_3c_double_3x3_2): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (inception_3c_double_3x3_2_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_3c_relu_double_3x3_2): ReLU(inplace)
      (inception_3c_pool): MaxPool2d(kernel_size=(3, 3), stride=(2, 2), dilation=(1, 1), ceil_mode=True)
      (inception_4a_1x1): Conv2d(576, 224, kernel_size=(1, 1), stride=(1, 1))
      (inception_4a_1x1_bn): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_1x1): ReLU(inplace)
      (inception_4a_3x3_reduce): Conv2d(576, 64, kernel_size=(1, 1), stride=(1, 1))
      (inception_4a_3x3_reduce_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_3x3_reduce): ReLU(inplace)
      (inception_4a_3x3): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4a_3x3_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_3x3): ReLU(inplace)
      (inception_4a_double_3x3_reduce): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
      (inception_4a_double_3x3_reduce_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_double_3x3_reduce): ReLU(inplace)
      (inception_4a_double_3x3_1): Conv2d(96, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4a_double_3x3_1_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_double_3x3_1): ReLU(inplace)
      (inception_4a_double_3x3_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4a_double_3x3_2_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_double_3x3_2): ReLU(inplace)
      (inception_4a_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_4a_pool_proj): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4a_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4a_relu_pool_proj): ReLU(inplace)
      (inception_4b_1x1): Conv2d(576, 192, kernel_size=(1, 1), stride=(1, 1))
      (inception_4b_1x1_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_1x1): ReLU(inplace)
      (inception_4b_3x3_reduce): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
      (inception_4b_3x3_reduce_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_3x3_reduce): ReLU(inplace)
      (inception_4b_3x3): Conv2d(96, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4b_3x3_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_3x3): ReLU(inplace)
      (inception_4b_double_3x3_reduce): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
      (inception_4b_double_3x3_reduce_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_double_3x3_reduce): ReLU(inplace)
      (inception_4b_double_3x3_1): Conv2d(96, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4b_double_3x3_1_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_double_3x3_1): ReLU(inplace)
      (inception_4b_double_3x3_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4b_double_3x3_2_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_double_3x3_2): ReLU(inplace)
      (inception_4b_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_4b_pool_proj): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4b_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4b_relu_pool_proj): ReLU(inplace)
      (inception_4c_1x1): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1))
      (inception_4c_1x1_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_1x1): ReLU(inplace)
      (inception_4c_3x3_reduce): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4c_3x3_reduce_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_3x3_reduce): ReLU(inplace)
      (inception_4c_3x3): Conv2d(128, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4c_3x3_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_3x3): ReLU(inplace)
      (inception_4c_double_3x3_reduce): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4c_double_3x3_reduce_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_double_3x3_reduce): ReLU(inplace)
      (inception_4c_double_3x3_1): Conv2d(128, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4c_double_3x3_1_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_double_3x3_1): ReLU(inplace)
      (inception_4c_double_3x3_2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4c_double_3x3_2_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_double_3x3_2): ReLU(inplace)
      (inception_4c_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_4c_pool_proj): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4c_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4c_relu_pool_proj): ReLU(inplace)
      (inception_4d_1x1): Conv2d(608, 96, kernel_size=(1, 1), stride=(1, 1))
      (inception_4d_1x1_bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_1x1): ReLU(inplace)
      (inception_4d_3x3_reduce): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4d_3x3_reduce_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_3x3_reduce): ReLU(inplace)
      (inception_4d_3x3): Conv2d(128, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4d_3x3_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_3x3): ReLU(inplace)
      (inception_4d_double_3x3_reduce): Conv2d(608, 160, kernel_size=(1, 1), stride=(1, 1))
      (inception_4d_double_3x3_reduce_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_double_3x3_reduce): ReLU(inplace)
      (inception_4d_double_3x3_1): Conv2d(160, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4d_double_3x3_1_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_double_3x3_1): ReLU(inplace)
      (inception_4d_double_3x3_2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4d_double_3x3_2_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_double_3x3_2): ReLU(inplace)
      (inception_4d_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_4d_pool_proj): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4d_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4d_relu_pool_proj): ReLU(inplace)
      (inception_4e_3x3_reduce): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_4e_3x3_reduce_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_4e_relu_3x3_reduce): ReLU(inplace)
      (inception_4e_3x3): Conv2d(128, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (inception_4e_3x3_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4e_relu_3x3): ReLU(inplace)
      (inception_4e_double_3x3_reduce): Conv2d(608, 192, kernel_size=(1, 1), stride=(1, 1))
      (inception_4e_double_3x3_reduce_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_4e_relu_double_3x3_reduce): ReLU(inplace)
      (inception_4e_double_3x3_1): Conv2d(192, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_4e_double_3x3_1_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (inception_4e_relu_double_3x3_1): ReLU(inplace)
      (inception_4e_double_3x3_2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (inception_4e_double_3x3_2_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (inception_4e_relu_double_3x3_2): ReLU(inplace)
      (inception_4e_pool): MaxPool2d(kernel_size=(3, 3), stride=(2, 2), dilation=(1, 1), ceil_mode=True)
      (inception_5a_1x1): Conv2d(1056, 352, kernel_size=(1, 1), stride=(1, 1))
      (inception_5a_1x1_bn): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_1x1): ReLU(inplace)
      (inception_5a_3x3_reduce): Conv2d(1056, 192, kernel_size=(1, 1), stride=(1, 1))
      (inception_5a_3x3_reduce_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_3x3_reduce): ReLU(inplace)
      (inception_5a_3x3): Conv2d(192, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5a_3x3_bn): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_3x3): ReLU(inplace)
      (inception_5a_double_3x3_reduce): Conv2d(1056, 160, kernel_size=(1, 1), stride=(1, 1))
      (inception_5a_double_3x3_reduce_bn): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_double_3x3_reduce): ReLU(inplace)
      (inception_5a_double_3x3_1): Conv2d(160, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5a_double_3x3_1_bn): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_double_3x3_1): ReLU(inplace)
      (inception_5a_double_3x3_2): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5a_double_3x3_2_bn): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_double_3x3_2): ReLU(inplace)
      (inception_5a_pool): AvgPool2d(kernel_size=3, stride=1, padding=1, ceil_mode=True, count_include_pad=True)
      (inception_5a_pool_proj): Conv2d(1056, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_5a_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_5a_relu_pool_proj): ReLU(inplace)
      (inception_5b_1x1): Conv2d(1024, 352, kernel_size=(1, 1), stride=(1, 1))
      (inception_5b_1x1_bn): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_1x1): ReLU(inplace)
      (inception_5b_3x3_reduce): Conv2d(1024, 192, kernel_size=(1, 1), stride=(1, 1))
      (inception_5b_3x3_reduce_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_3x3_reduce): ReLU(inplace)
      (inception_5b_3x3): Conv2d(192, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5b_3x3_bn): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_3x3): ReLU(inplace)
      (inception_5b_double_3x3_reduce): Conv2d(1024, 192, kernel_size=(1, 1), stride=(1, 1))
      (inception_5b_double_3x3_reduce_bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_double_3x3_reduce): ReLU(inplace)
      (inception_5b_double_3x3_1): Conv2d(192, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5b_double_3x3_1_bn): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_double_3x3_1): ReLU(inplace)
      (inception_5b_double_3x3_2): Conv2d(224, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (inception_5b_double_3x3_2_bn): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_double_3x3_2): ReLU(inplace)
      (inception_5b_pool): MaxPool2d(kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), ceil_mode=True)
      (inception_5b_pool_proj): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1))
      (inception_5b_pool_proj_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (inception_5b_relu_pool_proj): ReLU(inplace)
      (global_pool): AvgPool2d(kernel_size=7, stride=1, padding=0, ceil_mode=True, count_include_pad=True)
      (fc): Dropout(p=0.7)
    )
    (new_fc): Linear(in_features=1024, out_features=51, bias=True)
    (consensus): ConsensusModule(
    )
  )
)  and this is the length of fifty data list (supposed to be fifty? 20
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 41 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 42 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 43 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 44 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 45 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 46 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 47 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 48 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 49 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 50 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 51 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 52 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 53 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 54 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue 15
this is the length of list from get_from_queue 16
this is the length of list from get_from_queue 17
this is the length of list from get_from_queue 18
this is the length of list from get_from_queue 19
this is the length of list from get_from_queue 20
TMP_LIST 20 (480, 800, 3)
this is the output_queue size 55 RGB
this is the length of list from get_from_queue 1
this is the length of list from get_from_queue 2
this is the length of list from get_from_queue 3
this is the length of list from get_from_queue 4
this is the length of list from get_from_queue 5
this is the length of list from get_from_queue 6
this is the length of list from get_from_queue 7
this is the length of list from get_from_queue 8
this is the length of list from get_from_queue 9
this is the length of list from get_from_queue 10
this is the length of list from get_from_queue 11
this is the length of list from get_from_queue 12
this is the length of list from get_from_queue 13
this is the length of list from get_from_queue 14
this is the length of list from get_from_queue